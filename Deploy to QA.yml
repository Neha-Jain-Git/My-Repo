# =============================================================
# Salesforce Deployment Workflow (MALTSSQA Sandbox)
# =============================================================
# Purpose:
#   - Automates deployment of metadata changes to the MALTSSQA sandbox
#     when a PR is merged into the MALTSSQA branch or triggered manually.
#
# Key Features:
#   1. **Trigger**
#        - Runs when a PR into MALTSSQA branch is closed and merged.
#        - Can also be triggered manually via `workflow_dispatch`.
#   2. **Deployment Process**
#        - Checkout repo code.
#        - Install Salesforce CLI & plugins.
#        - Generate a delta package using `sfdx-git-delta` (based on last good SHA).
#        - Deploy metadata changes to the Salesforce sandbox.
#   3. **Failure Handling**
#        - Extracts grouped error messages from deployment result.
#        - Sends failure email notification to PR author (with fallback default email).
#   4. **Post-Success Action**
#        - Saves the commit SHA of the last successful deployment
#          into GitHub environment variable `LAST_GOOD_SHA_MALTSSQA`.
#
# Why repository_dispatch was used earlier:
#   - Some bot merges or `GITHUB_TOKEN` limitations skipped workflows.
#   - Using PAT ensures permissions for updating env variables reliably.
#
# =============================================================

name: Deploy to QA

on:
  pull_request:
    types: [closed]    # Trigger only when PRs are closed
    branches:
      - MALTSSQA       # Only for MALTSSQA branch merges
    paths:
      - 'force-app/main/default/**'   # Only run if Salesforce metadata changed
  workflow_dispatch:   # Allow manual trigger

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

env:
  environment: MALTSSQA
  SF_MALTSSQA_AUTH_URL: ${{ secrets.SF_MALTSSQA_AUTH_URL }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  # -----------------------------------------------------------
  # Job: Deploy metadata changes on PR merge
  # -----------------------------------------------------------
  deploy-on-merge:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'MALTSSQA'
    runs-on: uhg-runner-m
    environment: MALTSSQA

    outputs:
      deploy_status: ${{ steps.deploy.outputs.deploy_status }}

    steps:
      # Step 1: Checkout repo code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Full history for delta calculation

      # Step 2: Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sf-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          export PATH=$HOME/sfdx/bin:$PATH
          sf version

      # Step 3: Create Auth file from secret
      - name: Populate auth file with SF_AUTH secret
        run: |
          echo "${{ secrets.SF_MALTSSQA_AUTH_URL }}" > ./AUTHURL.txt
          if [ $(wc -c < "./AUTHURL.txt") -le 1 ]; then
            echo "Missing AUTHURL secret"
            exit 1
          fi

      # Step 4: Authenticate to Salesforce org
      - name: Authenticate to the Org
        run: sf org login sfdx-url --sfdx-url-file ./AUTHURL.txt --set-default --alias thisOrg

      # Step 5: Install sfdx-git-delta plugin
      - name: Install sfdx git delta
        run: echo y | sf plugins install sfdx-git-delta

      # Step 6: Generate delta package (compare last successful SHA with branch tip)
      - name: Create delta package
        run: |
          mkdir -p build/temp/changed-sources
          echo GOOD_SHA: "${{ vars.LAST_GOOD_SHA_MALTSSQA }}"
          sf sgd source delta --from "${{ vars.LAST_GOOD_SHA_MALTSSQA }}" --to "origin/MALTSSQA" \
            --output-dir build/temp/changed-sources/ --generate-delta --source-dir force-app/ --ignore-file .gitignore
          find build/temp/changed-sources/ -type d -empty -delete
          zip -r build/temp/changed-sources.zip build/temp/changed-sources/

      # Step 7: Display generated package.xml for debugging
      - name: Display package.xml
        run: |
          echo "Contents of package.xml:"
          cat build/temp/changed-sources/package/package.xml
          
      # Step 8: Upload delta package as artifact
      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: changed-sources
          path: build/temp/changed-sources.zip

      # Step 9: Remove destructive changes (if any) before deploy
      - name: Remove destructiveChanges.xml
        run: |
          cat build/temp/changed-sources/destructiveChanges/destructiveChanges.xml
          rm -f build/temp/changed-sources/destructiveChanges/destructiveChanges.xml
          
      # Step 10: Deploy delta package to Salesforce org
      - name: Deploy to Sandbox
        id: deploy
        run: |
          echo "Starting Salesforce Deployment"
          if ! sf project deploy start \
            --source-dir build/temp/changed-sources/ \
            --target-org thisOrg \
            --wait 360 \
            --json \
            --verbose > deploy-result.json 2> deploy-error.log; then
            if grep -q '"name": "NothingToDeploy"' deploy-result.json; then
              echo "No changes to deploy. Skipping..."
              exit 0
            fi
            echo "Deployment failed."
            echo "deploy_status=Failed" >> $GITHUB_OUTPUT
          else
            echo "Deployment succeeded."
            echo "deploy_status=Succeeded" >> $GITHUB_OUTPUT
          fi

      # Step 11: Always upload deployment result for debugging
      - name: Upload deployment result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-result
          path: deploy-result.json

  # -----------------------------------------------------------
  # Job: Send failure email notification
  # -----------------------------------------------------------
  Send_Email_Notification:
    runs-on: uhg-runner-m
    environment: MALTSSQA
    needs: deploy-on-merge
    if: needs.deploy-on-merge.outputs.deploy_status == 'Failed'

    steps:
      # Step 1: Checkout code (to keep repo context if needed)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Download deployment result artifact
      - name: Download deployment result
        uses: actions/download-artifact@v4
        with:
          name: deploy-result

      # Step 3: Extract and group errors by file
      - name: Extract Grouped Errors
        id: grouped
        run: |
          jq -r '.result.details.componentFailures[]? | "\(.fileName): \(.problem)"' deploy-result.json \
            | grep -v null > file-errors.txt || true
          
          if [ -s file-errors.txt ]; then
            awk -F': ' '
              {
                file=$1
                error=$2
                if (file != lastFile) {
                  count++
                  if (count > 1) print ""
                  print count ". " file
                  lastFile=file
                  errorCount=0
                }
                errorCount++
                print "   " count "." errorCount ") " error
              }
            ' file-errors.txt > grouped-errors.txt
          else
            echo "No errors found." > grouped-errors.txt
          fi

          {
            echo "grouped<<EOF"
            cat grouped-errors.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT

      # Step 4: Map PR author login to email (fallback to default email if none)
      - name: Map PR requester to email
        id: pr_author
        run: |
          AUTHOR_LOGIN="${{ github.event.pull_request.user.login }}"
          EMAIL=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/users/$AUTHOR_LOGIN" |
          jq -r '.email')

          if [ "$EMAIL" == "null" ] || [ -z "$EMAIL" ]; then
             EMAIL="default-notify@optum.com"
          fi
          echo "PR Author: $AUTHOR_LOGIN"
          echo "Email: $EMAIL"
          echo "email=$EMAIL" >> $GITHUB_OUTPUT

      # Step 5: Send email notification with grouped errors
      - name: Send Email on Failure
        if: needs.deploy-on-merge.outputs.deploy_status == 'Failed'
        uses: uhg-pipelines/epl-send-mail@v1
        with:
          subject: "Build Failure - Your files caused errors"
          to: "${{ steps.pr_author.outputs.email }}"
          cc: neha_jain@optum.com, brajesh_tiwary@optum.com, chandrasekhar_uppalapati@optum.com, gopal_shakti@optum.com, shikha_devi@optum.com
          from: "notifications@github.com"
          body: |
            The deployment to QA failed due to the following issues:
            
            ${{ steps.grouped.outputs.grouped }}

  # -----------------------------------------------------------
  # Job: Save last successful commit SHA to environment variable
  # -----------------------------------------------------------
  save_last_good_sha:
    runs-on: uhg-runner-m
    environment: MALTSSQA
    needs: deploy-on-merge
    if: needs.deploy-on-merge.outputs.deploy_status == 'Succeeded'

    steps:
      # Step 1: Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Update environment variable with latest successful SHA
      - name: Update LAST_GOOD_SHA_MALTSSQA environment variable
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          ENV_NAME: MALTSSQA
          VARIABLE_NAME: LAST_GOOD_SHA_MALTSSQA
          SHA: ${{ github.sha }}
        run: |
          echo "Updating $VARIABLE_NAME in environment $ENV_NAME with SHA=$SHA"
      
          # Try PATCH update first
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables/$VARIABLE_NAME \
            -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
      
          # If not found, create new variable
          if [ "$RESPONSE" -eq 404 ]; then
            echo "Variable not found, creating instead..."
            RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables \
              -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
          fi
      
          echo "HTTP Response: $RESPONSE"
          cat response.json
