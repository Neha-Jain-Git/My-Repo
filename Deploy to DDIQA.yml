# ======================================================================
# Salesforce Deployment Workflow (DDIQA Sandbox)
# ======================================================================
# Purpose:
#   This workflow automates Salesforce metadata deployments to the DDIQA
#   sandbox whenever changes are merged into the `DDIQAGH` branch or
#   triggered manually.
#
# Triggers:
#   - pull_request closed (merged into DDIQAGH)
#   - push to DDIQAGH branch (force-app changes only)
#   - manual trigger via workflow_dispatch
#
# Deployment Flow:
#   1. Checkout repository code
#   2. Install Salesforce CLI and authenticate to target org
#   3. Generate delta package using sfdx-git-delta (based on last good SHA)
#   4. Deploy package to sandbox
#   5. Upload deployment artifacts (logs, results, package.xml)
#   6. On failure → Send email notification (grouped errors by file)
#   7. On success → Save last successful commit SHA to GitHub environment variable
#
# Special Handling:
#   - Skips deployment if no changes are detected
#   - Ignores destructiveChanges.xml to prevent accidental deletions
#   - Tracks last known good commit SHA for reliable delta builds
#   - Uses Personal Access Token (PAT) for environment updates + email lookup
#
# Outputs:
#   - deploy_status (Succeeded / Failed / Skipped)
# ======================================================================

name: Deploy to DDIQA

on:
  pull_request:
    types: [closed]         # Trigger when PR is closed
    branches:
      - DDIQAGH             # Only for merges into DDIQAGH branch
    paths:
      - 'force-app/main/default/**'
  push:
    branches:
      - DDIQAGH             # Trigger on direct pushes to DDIQAGH
    paths:
      - 'force-app/main/default/**'
  workflow_dispatch:         # Allow manual trigger

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

env:
  environment: DDIQA
  SF_DDIQA_AUTH_URL: ${{ secrets.SF_DDIQA_AUTH_URL }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  deploy-on-merge:
    runs-on: uhg-runner-m
    environment: DDIQA

    outputs:
      deploy_status: ${{ steps.deploy.outputs.deploy_status }}

    steps:
      # -----------------------------------------------------------
      # Step 1: Checkout the repository code (with full history)
      # -----------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------------------------------------
      # Step 2: Install Salesforce CLI
      # -----------------------------------------------------------
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sf-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          export PATH=$HOME/sfdx/bin:$PATH
          sf version

      # -----------------------------------------------------------
      # Step 3: Authenticate to Salesforce org using sfdxAuthUrl
      # -----------------------------------------------------------
      - name: Populate auth file with SF_AUTH secret
        run: |
          echo "${{ secrets.SF_DDIQA_AUTH_URL }}" > ./AUTHURL.txt
          if [ $(wc -c < "./AUTHURL.txt") -le 1 ]; then
            echo "Missing AUTHURL secret"
            exit 1
          fi

      - name: Authenticate to the Org
        run: sf org login sfdx-url --sfdx-url-file ./AUTHURL.txt --set-default --alias thisOrg

      # -----------------------------------------------------------
      # Step 4: Install sfdx-git-delta (delta package generator)
      # -----------------------------------------------------------
      - name: Install sfdx git delta
        run: echo y | sf plugins install sfdx-git-delta

      # -----------------------------------------------------------
      # Step 5: Create delta package from last successful SHA
      # -----------------------------------------------------------
      - name: Create delta package
        run: |
          mkdir -p build/temp/changed-sources
          echo GOOD_SHA: "${{ vars.LAST_GOOD_SHA_DDIQA }}"
          sf sgd source delta --from "${{ vars.LAST_GOOD_SHA_DDIQA }}" --to "origin/DDIQAGH" \
            --output-dir build/temp/changed-sources/ --generate-delta --source-dir force-app/ --ignore-file .gitignore
          find build/temp/changed-sources/ -type d -empty -delete
          zip -r build/temp/changed-sources.zip build/temp/changed-sources/

      - name: Display package.xml
        run: |
          echo "Contents of package.xml:"
          cat build/temp/changed-sources/package/package.xml

      # -----------------------------------------------------------
      # Step 6: Upload package as artifact for debugging
      # -----------------------------------------------------------
      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: changed-sources
          path: build/temp/changed-sources.zip
          retention-days: 7

      # -----------------------------------------------------------
      # Step 7: Remove destructiveChanges.xml (safety measure)
      # -----------------------------------------------------------
      - name: Remove destructiveChanges.xml
        run: |
          cat build/temp/changed-sources/destructiveChanges/destructiveChanges.xml || true
          rm -f build/temp/changed-sources/destructiveChanges/destructiveChanges.xml

      # -----------------------------------------------------------
      # Step 8: Deploy to Salesforce Sandbox
      # -----------------------------------------------------------
      - name: Deploy to Sandbox
        id: deploy
        run: |
          echo "Starting Salesforce Deployment"
          if ! sf project deploy start \
            --source-dir build/temp/changed-sources/ \
            --target-org thisOrg \
            --wait 360 \
            --json \
            --verbose > deploy-result.json 2> deploy-error.log; then

            if grep -q '"name": "NothingToDeploy"' deploy-result.json; then
              echo "No changes to deploy. Skipping..."
              echo "deploy_status=Skipped" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "Deployment failed."
            echo "deploy_status=Failed" >> $GITHUB_OUTPUT
          else
            echo "Deployment succeeded."
            echo "deploy_status=Succeeded" >> $GITHUB_OUTPUT
          fi

      # -----------------------------------------------------------
      # Step 9: Upload deployment logs/results for troubleshooting
      # -----------------------------------------------------------
      - name: Upload deployment result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-result
          path: |
            deploy-result.json
            deploy-error.log
          retention-days: 7

  # ==================================================================
  # JOB: Send Email Notification (only on deployment failure)
  # ==================================================================
  Send_Email_Notification:
    runs-on: uhg-runner-m
    environment: DDIQA
    needs: deploy-on-merge
    if: needs.deploy-on-merge.outputs.deploy_status == 'Failed'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download deployment result
        uses: actions/download-artifact@v4
        with:
          name: deploy-result

      # Extract errors and group them by file
      - name: Extract Grouped Errors
        id: grouped
        run: |
          jq -r '.result.details.componentFailures[]? | "\(.fileName): \(.problem)"' deploy-result.json \
            | grep -v null > file-errors.txt || true
          
          if [ -s file-errors.txt ]; then
            awk -F': ' '
              {
                file=$1
                error=$2
                if (file != lastFile) {
                  count++
                  if (count > 1) print ""
                  print count ". " file
                  lastFile=file
                  errorCount=0
                }
                errorCount++
                print "   " count "." errorCount ") " error
              }
            ' file-errors.txt > grouped-errors.txt
          else
            echo "No errors found." > grouped-errors.txt
          fi

          echo "grouped=$(sed ':a;N;$!ba;s/\n/\\n/g' grouped-errors.txt)" >> $GITHUB_OUTPUT

      # Try mapping PR author to email (fallback to commit email if null)
      - name: Map PR requester to email
        id: pr_author
        run: |
          AUTHOR_LOGIN="${{ github.event.pull_request.user.login }}"
          EMAIL=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/users/$AUTHOR_LOGIN" | jq -r '.email')

          if [ "$EMAIL" == "null" ] || [ -z "$EMAIL" ]; then
             EMAIL=$(git log -1 --pretty=format:'%ae')
          fi

          if [ -z "$EMAIL" ]; then
             EMAIL="default-notify@optum.com"
          fi

          echo "PR Author: $AUTHOR_LOGIN"
          echo "Email: $EMAIL"
          echo "email=$EMAIL" >> $GITHUB_OUTPUT

      # Send failure email with grouped errors
      - name: Send Email on Failure
        uses: uhg-pipelines/epl-send-mail@v1
        with:
          subject: "Build Failure - Your files caused errors"
          to: "${{ steps.pr_author.outputs.email }}"
          cc: neha_jain@optum.com, brajesh_tiwary@optum.com, chandrasekhar_uppalapati@optum.com, gopal_shakti@optum.com, shikha_devi@optum.com
          from: "donotreply@optum.com"
          body: |
            The deployment to DDIQA failed due to the following issues:

            ${{ steps.grouped.outputs.grouped }}

  # ==================================================================
  # JOB: Save last successful SHA (only if deploy succeeded)
  # ==================================================================
  save_last_good_sha:
    runs-on: uhg-runner-m
    environment: DDIQA
    needs: deploy-on-merge
    if: needs.deploy-on-merge.outputs.deploy_status == 'Succeeded'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Update GitHub environment variable with last successful SHA
      - name: Update LAST_GOOD_SHA_DDIQA environment variable
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          ENV_NAME: DDIQA
          VARIABLE_NAME: LAST_GOOD_SHA_DDIQA
          SHA: ${{ github.sha }}
        run: |
          echo "Updating $VARIABLE_NAME in environment $ENV_NAME with SHA=$SHA"
      
          # Try to update (PATCH)
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables/$VARIABLE_NAME \
            -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
      
          if [ "$RESPONSE" -eq 404 ]; then
            echo "Variable not found, creating instead..."
            RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables \
              -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
          fi
      
          echo "HTTP Response: $RESPONSE"
          cat response.json
