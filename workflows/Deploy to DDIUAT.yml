# =============================================================
# Salesforce Deployment Workflow (DDIUAT Sandbox)
# =============================================================
# Purpose:
#   - Automates deployment of metadata changes to the DDIUAT sandbox
#     when a PR is merged into the DDIUATGH branch or triggered manually.
#
# Key Features:
#   1. **Trigger**
#        - Runs when a PR into MALTSSQA branch is closed and merged.
#        - Can also be triggered manually via `workflow_dispatch`.
#   2. **Deployment Process**
#        - Checkout repo code.
#        - Install Salesforce CLI & plugins.
#        - Generate a delta package using `sfdx-git-delta` (based on last good SHA).
#        - Deploy metadata changes to the Salesforce sandbox.
#   3. **Failure Handling**
#        - Extracts grouped error messages from deployment result.
#        - Sends failure email notification to PR author (with fallback default email).
#   4. **Post-Success Action**
#        - Saves the commit SHA of the last successful deployment
#          into GitHub environment variable `LAST_GOOD_SHA_DDIUAT`.
#
# Why repository_dispatch was used earlier:
#   - Some bot merges or `GITHUB_TOKEN` limitations skipped workflows.
#   - Using PAT ensures permissions for updating env variables reliably.
#
# =============================================================

name: Deploy to DDIUAT

on:
  # Uncomment below to run automatically on pushes to DDIUATGH
  # push:
  #   branches:
  #     - "DDIUATGH"
  #   paths:
  #     - 'force-app/main/default/**'
  workflow_dispatch:   # allows manual triggering

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

env:
  environment: DDIUAT, Test
  SF_DDIUAT_AUTH_URL: ${{ secrets.SF_DDIUAT_AUTH_URL }}   # Salesforce auth secret
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}                     # Personal Access Token

jobs:
  # -----------------------------------------------------------
  # Job: Deploy metadata changes on PR merge
  # -----------------------------------------------------------
  deploy-on-merge:
    runs-on: uhg-runner
    if: contains('["njain95_uhg", "uchandr5_uhg", "btiwary1_uhg", "sgopal22_uhg", "sdevi15_uhg"]', github.actor)
    environment: DDIUAT

    outputs:
      deploy_status: ${{ steps.deploy.outputs.deploy_status }}

    steps:

    # Now we install nodejs in the VM, and specify version 20
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # -----------------------------------------------------------
      # Step 1: Checkout the repository code (with full history)
      # -----------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Full history for delta calculation

      - name: Configure JFrog npm registry
        run: echo "//centraluhg.jfrog.io/artifactory/api/npm/maltss-npm-vir/:_authToken=${JFROG_NPM_TOKEN}" > ~/.npmrc
        env:
          environment: MALTSSQA
          JFROG_NPM_TOKEN: ${{ secrets.JFROG_NPM_TOKEN }}
          
      - name: Set Salesforce CLI registry
        run: echo "SF_NPM_REGISTRY=https://centraluhg.jfrog.io/artifactory/api/npm/maltss-npm-vir/" >> $GITHUB_ENV
          
          
      # -----------------------------------------------------------
      # Step 2: Install Salesforce CLI
      # -----------------------------------------------------------
      - name: Install Salesforce CLI
        run: | 
          npm install -g @salesforce/cli --registry=https://centraluhg.jfrog.io/artifactory/api/npm/maltss-npm-vir/
          sf --version
          echo "-- Set Salesforce CLI environment variables --"
          echo "SF_DISABLE_AUTOUPDATE=true" >> $GITHUB_ENV
          echo "SF_DISABLE_SOURCE_MEMBER_POLLING=true" >> $GITHUB_ENV

      # -----------------------------------------------------------
      # Step 3: Authenticate to Salesforce org using sfdxAuthUrl
      # -----------------------------------------------------------
      - name: Populate auth file with SF_AUTH secret
        run: |
          echo "${{ secrets.SF_DDIUAT_AUTH_URL }}" > ./AUTHURL.txt
          if [ $(wc -c < "./AUTHURL.txt") -le 1 ]; then
            echo "Missing AUTHURL secret"
            exit 1
          fi
          
      - name: Authenticate to the Org
        run: sf org login sfdx-url --sfdx-url-file ./AUTHURL.txt --set-default --alias thisOrg

      # -----------------------------------------------------------
      # Step 4: Install sfdx-git-delta (delta package generator)
      # -----------------------------------------------------------
      - name: Install sfdx git delta
        run: echo y | sfdx plugins:install sfdx-git-delta@6.19.0
 

      # -----------------------------------------------------------
      # Step 5: Create delta package from last successful SHA
      # -----------------------------------------------------------
      - name: Create delta package
        run: |
          mkdir -p build/temp/changed-sources
          echo "LAST_GOOD_SHA_DDIUAT: ${{ vars.LAST_GOOD_SHA_DDIUAT }}"
          sf sgd source delta --from "${{ vars.LAST_GOOD_SHA_DDIUAT }}" --to "origin/DDIUATGH" \
            --output-dir build/temp/changed-sources/ --generate-delta --source-dir force-app/ --ignore-file .gitignore
          find build/temp/changed-sources/ -type d -empty -delete
          zip -r build/temp/changed-sources.zip build/temp/changed-sources/

      - name: Display package.xml
        run: |
          echo "Contents of package.xml:"
          cat build/temp/changed-sources/package/package.xml
          
      # -----------------------------------------------------------
      # Step 6: Upload package as artifact for debugging
      # -----------------------------------------------------------
      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: changed-sources
          path: build/temp/changed-sources.zip

      # -----------------------------------------------------------
      # Step 7: Remove destructiveChanges.xml (safety measure)
      # -----------------------------------------------------------
      - name: Remove destructiveChanges.xml
        run: |
          cat build/temp/changed-sources/destructiveChanges/destructiveChanges.xml
          rm -f build/temp/changed-sources/destructiveChanges/destructiveChanges.xml
          
      # -----------------------------------------------------------
      # Step 8: Deploy to Salesforce Sandbox
      # -----------------------------------------------------------
      - name: Deploy to Sandbox
        id: deploy
        run: |
          echo "Starting Salesforce Deployment"
          if ! sf project deploy start \
            --source-dir build/temp/changed-sources/ \
            --target-org thisOrg \
            --wait 360 \
            --json \
            --verbose > deploy-result.json 2> deploy-error.log; then
            if grep -q '"name": "NothingToDeploy"' deploy-result.json; then
              echo "No changes to deploy. Skipping..."
              exit 0
            fi
            echo "Deployment failed."
            echo "deploy_status=Failed" >> $GITHUB_OUTPUT
          else
            echo "Deployment succeeded."
            echo "deploy_status=Succeeded" >> $GITHUB_OUTPUT
          fi

      # -----------------------------------------------------------
      # Step 9: Upload deployment logs/results for troubleshooting
      # -----------------------------------------------------------
      - name: Upload deployment result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-result
          path: deploy-result.json

  # -----------------------------------------------------------
  # Job: Send failure email notification
  # -----------------------------------------------------------
  Send_Email_Notification:
    runs-on: uhg-runner
    environment: DDIUAT
    needs: deploy-on-merge
    if: needs.deploy-on-merge.outputs.deploy_status == 'Failed'

    steps:
      # -----------------------------------------------------------
      # Step 1: Checkout the repository code (with full history)
      # -----------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download deployment result
        uses: actions/download-artifact@v4
        with:
          name: deploy-result

      # -----------------------------------------------------------
      # Step 2: Extract errors and group them by file
      # -----------------------------------------------------------

      - name: Extract Grouped Errors
        id: grouped
        run: |
          jq -r '.result.details.componentFailures[]? | "\(.fileName): \(.problem)"' deploy-result.json \
            | grep -v null > file-errors.txt || true
          
          if [ -s file-errors.txt ]; then
            awk -F': ' '
              {
                file=$1
                error=$2
                if (file != lastFile) {
                  count++
                  if (count > 1) print ""
                  print count ". " file
                  lastFile=file
                  errorCount=0
                }
                errorCount++
                print "   " count "." errorCount ") " error
              }
            ' file-errors.txt > grouped-errors.txt
          else
            echo "No errors found." > grouped-errors.txt
          fi

          {
            echo "grouped<<EOF"
            cat grouped-errors.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT

      # -----------------------------------------------------------
      # Step 3: Extract errors as HTML Table Rows
      # -----------------------------------------------------------
      
      - name: Extract Errors as HTML Table Rows
        id: grouped-html
        run: |
          echo "<tr style='background-color:#f2f2f2;font-weight:bold;'><td>API Name</td><td>Type</td><td>Line</td><td>Column</td><td>Error Message</td></tr>" > error-rows.html

          jq -r '.result.details.componentFailures[]? 
            | "<tr><td>\(.fileName)</td><td>\(.componentType)</td><td>\(.lineNumber // "-")</td><td>\(.columnNumber // "-")</td><td>\(.problem)</td></tr>"' \
            deploy-result.json >> error-rows.html

          echo "rows=$(sed ':a;N;$!ba;s/\n/ /g' error-rows.html)" >> $GITHUB_OUTPUT



      # -----------------------------------------------------------
      # Step 5: Send failure email with grouped errors
      # -----------------------------------------------------------

      - name: Send Email on Failure
        if: needs.deploy-on-merge.outputs.deploy_status == 'Failed'
        uses: uhg-pipelines/epl-send-mail@v1
        with:
          subject: "Build Failure - Your files caused errors"
          to: brajesh_tiwary@optum.com, chandrasekhar_uppalapati@optum.com, gopal_shakti@optum.com, shikha_devi@optum.com
          cc: neha_jain@optum.com
          from: "donotreply@optum.com"
          html_body: |
            <html>
            <body>
              <p>Hello,</p>
              <p>The deployment to <b>DDIUAT</b> failed due to the following issues:</p>

              <table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse; font-family: Arial, sans-serif; font-size: 13px; width: 100%;">
                ${{ steps.grouped-html.outputs.rows }}
              </table>

              <p>Please fix the above errors and re-run the deployment.</p>
            </body>
            </html>

  # -----------------------------------------------------------
  # JOB: Save last successful SHA (only if deploy succeeded)
  # -----------------------------------------------------------
  save_last_good_sha:
    runs-on: uhg-runner
    environment: DDIUAT
    needs: deploy-on-merge
    if: needs.deploy-on-merge.outputs.deploy_status == 'Succeeded'

    steps:
      # -----------------------------------------------------------
      # Step 1: Checkout the repository code (with full history)
      # -----------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------------------------------------
      # Step 2: Update GitHub environment variable with last successful SHA
      # -----------------------------------------------------------
      - name: Update LAST_GOOD_SHA_MALTSSQA environment variable
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          ENV_NAME: DDIUAT
          VARIABLE_NAME: LAST_GOOD_SHA_DDIUAT
          SHA: ${{ github.sha }}
        run: |
          echo "Updating $VARIABLE_NAME in environment $ENV_NAME with SHA=$SHA"
      
          # Try PATCH update first
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables/$VARIABLE_NAME \
            -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
      
          # If not found, create new variable
          if [ "$RESPONSE" -eq 404 ]; then
            echo "Variable not found, creating instead..."
            RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables \
              -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
          fi
      
          echo "HTTP Response: $RESPONSE"
          cat response.json
