# ======================================================================================
# Salesforce Deployment Workflow (STAGE Sandbox)
# ======================================================================================
# PURPOSE:
#   - This workflow is responsible for deploying Salesforce metadata changes to the
#     STAGE Sandbox environment. It is manually triggered by workflow_dispatch.
#
# TRIGGERS:
#   - Manually via GitHub UI (`workflow_dispatch`)
#
# WHY PAT (Personal Access Token):
#   - Some bot merges or limitations with GITHUB_TOKEN may cause skipped workflows.
#   - Using a PAT ensures proper permissions to:
#       1. Update environment variables (like LAST_GOOD_SHA_STAGE)
#       2. Perform reliable deployments
#
# HIGH-LEVEL FLOW:
#   1. Checkout repository code.
#   2. Install Salesforce CLI and required plugins.
#   3. Generate delta package using sfdx-git-delta (changes since LAST_GOOD_SHA_STAGE).
#   4. Deploy changes to STAGE sandbox.
#   5. On failure:
#        - Extract grouped errors per file.
#        - Send email notification to PR author and CC team members.
#   6. On success:
#        - Save the current commit SHA as LAST_GOOD_SHA_STAGE in environment variables.
#
# ARTIFACTS:
#   - `changed-sources.zip`: delta package generated for deployment.
#   - `deploy-result.json`: JSON output of Salesforce deployment.
#
# NOTES:
#   - Uses custom runners (`uhg-runner-m`).
#   - Deployment waits for up to 360 minutes (6 hours).
#   - Email notifications use `uhg-pipelines/epl-send-mail@v1`.
# ======================================================================================

name: Deploy to STAGE

on:
  workflow_dispatch:   # Triggered manually

permissions:
  contents: write       # Required for updating environment variables
  pull-requests: write
  checks: read
  actions: write

env:
  environment: STAGE
  SF_STAGE_AUTH_URL: ${{ secrets.SF_STAGE_AUTH_URL }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  # ----------------------------------------------------------
  # JOB 1: Deploy to Salesforce STAGE Sandbox
  # ----------------------------------------------------------
  deploy-on-merge:
    runs-on: uhg-runner-m
    environment: STAGE

    outputs:
      deploy_status: ${{ steps.deploy.outputs.deploy_status }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Fetch full history (needed for delta)

      # Step 2: Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sf-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          export PATH=$HOME/sfdx/bin:$PATH
          sf version

      # Step 3: Populate auth file with secret
      - name: Populate auth file with SF_AUTH secret
        run: |
          echo "${{ secrets.SF_STAGE_AUTH_URL }}" > ./AUTHURL.txt
          if [ $(wc -c < "./AUTHURL.txt") -le 1 ]; then
            echo "Missing AUTHURL secret"
            exit 1
          fi

      # Step 4: Authenticate into Salesforce org
      - name: Authenticate to the Org
        run: sf org login sfdx-url --sfdx-url-file ./AUTHURL.txt --set-default --alias thisOrg

      # Step 5: Install sfdx-git-delta plugin
      - name: Install sfdx git delta
        run: echo y | sf plugins install sfdx-git-delta

      # Step 6: Create delta package from last good SHA to main
      - name: Create delta package
        run: |
          mkdir -p build/temp/changed-sources
          echo GOOD_SHA: "${{ vars.LAST_GOOD_SHA_STAGE }}"
          sf sgd source delta --from "${{ vars.LAST_GOOD_SHA_STAGE }}" --to "origin/main" \
            --output-dir build/temp/changed-sources/ --generate-delta --source-dir force-app/ --ignore-file .gitignore
          find build/temp/changed-sources/ -type d -empty -delete
          zip -r build/temp/changed-sources.zip build/temp/changed-sources/

      # Step 7: Display generated package.xml
      - name: Display package.xml
        run: |
          echo "Contents of package.xml:"
          cat build/temp/changed-sources/package/package.xml
          
      # Step 8: Upload delta package artifact
      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: changed-sources
          path: build/temp/changed-sources.zip

      # Step 9: Remove destructiveChanges.xml (if exists)
      - name: Remove destructiveChanges.xml
        run: |
          cat build/temp/changed-sources/destructiveChanges/destructiveChanges.xml
          rm -f build/temp/changed-sources/destructiveChanges/destructiveChanges.xml
          
      # Step 10: Deploy to Salesforce Sandbox
      - name: Deploy to Sandbox
        id: deploy
        run: |
          echo "Starting Salesforce Deployment"
          if ! sf project deploy start \
            --source-dir build/temp/changed-sources/ \
            --target-org thisOrg \
            --wait 360 \
            --json \
            --verbose > deploy-result.json 2> deploy-error.log; then
            if grep -q '"name": "NothingToDeploy"' deploy-result.json; then
              echo "No changes to deploy. Skipping..."
              exit 0
            fi
            echo "Deployment failed."
            echo "deploy_status=Failed" >> $GITHUB_OUTPUT
          else
            echo "Deployment succeeded."
            echo "deploy_status=Succeeded" >> $GITHUB_OUTPUT

      # Step 11: Always upload deployment result JSON
      - name: Upload deployment result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-result
          path: deploy-result.json

  # ----------------------------------------------------------
  # JOB 2: Send Email Notification on Deployment Failure
  # ----------------------------------------------------------
  Send_Email_Notification:
    runs-on: uhg-runner-m
    environment: STAGE
    needs: deploy-on-merge
    if: needs.deploy-on-merge.outputs.deploy_status == 'Failed'

    steps:
      # Step 1: Checkout repo (for scripts if needed)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Download deploy-result artifact
      - name: Download deployment result
        uses: actions/download-artifact@v4
        with:
          name: deploy-result

      # Step 3: Extract grouped errors per file
      - name: Extract Grouped Errors
        id: grouped
        run: |
          jq -r '.result.details.componentFailures[]? | "\(.fileName): \(.problem)"' deploy-result.json \
            | grep -v null > file-errors.txt || true
          
          if [ -s file-errors.txt ]; then
            awk -F': ' '
              {
                file=$1
                error=$2
                if (file != lastFile) {
                  count++
                  if (count > 1) print ""
                  print count ". " file
                  lastFile=file
                  errorCount=0
                }
                errorCount++
                print "   " count "." errorCount ") " error
              }
            ' file-errors.txt > grouped-errors.txt
          else
            echo "No errors found." > grouped-errors.txt
          fi

          echo "grouped=$(sed ':a;N;$!ba;s/\n/\\n/g' grouped-errors.txt)" >> $GITHUB_OUTPUT

      # Step 4: Send Email with grouped errors
      - name: Send Email on Failure
        if: needs.deploy-on-merge.outputs.deploy_status == 'Failed'
        uses: uhg-pipelines/epl-send-mail@v1
        with:
          subject: "Build Failure - Your files caused errors"
          to:  brajesh_tiwary@optum.com, chandrasekhar_uppalapati@optum.com, gopal_shakti@optum.com, shikha_devi@optum.com
          cc: neha_jain@optum.com
          from: "donotreply@optum.com"
          body: |
            The deployment to STAGE failed due to the following issues:
            
            ${{ steps.grouped.outputs.grouped }}

  # ----------------------------------------------------------
  # JOB 3: Save Last Good Commit SHA on Successful Deployment
  # ----------------------------------------------------------
  save_last_good_sha:
    runs-on: uhg-runner-m
    environment: STAGE
    needs: deploy-on-merge
    if: needs.deploy-on-merge.outputs.deploy_status == 'Succeeded'

    steps:
      # Step 1: Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Update environment variable LAST_GOOD_SHA_STAGE
      - name: Update LAST_GOOD_SHA_STAGE environment variable
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          ENV_NAME: STAGE
          VARIABLE_NAME: LAST_GOOD_SHA_STAGE
          SHA: ${{ github.sha }}
        run: |
          echo "Updating $VARIABLE_NAME in environment $ENV_NAME with SHA=$SHA"
      
          # Try to update (PATCH existing variable)
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables/$VARIABLE_NAME \
            -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
      
          if [ "$RESPONSE" -eq 404 ]; then
            echo "Variable not found, creating instead..."
            RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables \
              -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
          fi
      
          echo "HTTP Response: $RESPONSE"
          cat response.json
