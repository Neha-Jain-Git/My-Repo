# Workflow: Merge MALTSSQA to RELEASE
# Summary:
# This workflow merges changes from the MALTSSQA branch into the RELEASE092025 branch.
# It identifies changed files since the last successful merge, generates delta metadata files,
# applies non-deletion changes, commits them, and updates the SHA reference for future merges.

name: Merge MALTSSQA to RELEASE

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

jobs:
  Merge:
    runs-on: uhg-runner-m
    environment: RELEASE
    steps:
      # Checkout the target RELEASE branch
      - name: Checkout target branch (RELEASE092025)
        uses: actions/checkout@v4
        with:
          ref: RELEASE092025
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      # Configure Git user details
      - name: Configure Git
        run: |
          git config user.email "maltss_tech@optum.com"
          git config user.name "maltssdeploy"

      # Add remote and fetch source branch (MALTSSQA)
      - name: Add remote and fetch source branch (MALTSSQA)
        run: |
          git remote add source-origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git || true
          git fetch source-origin MALTSSQA

      # Retrieve the last successfully merged SHA
      - name: Get last merged SHA
        id: lastsha
        run: echo "sha=${{ vars.LAST_GOOD_SHA_RELEASE_MERGE }}" >> $GITHUB_OUTPUT

      # Identify changed files since last promotion
      - name: Find changed files since last promotion
        id: changes
        run: |
          mkdir -p artifacts
          if [ -n "${{ steps.lastsha.outputs.sha }}" ]; then
            git diff --name-status ${{ steps.lastsha.outputs.sha }} source-origin/MALTSSQA -- force-app/main/default/ > artifacts/changed_files.txt
          else
            git diff --name-status origin/RELEASE092025 source-origin/MALTSSQA -- force-app/main/default/ > artifacts/changed_files.txt
          fi
          echo "Changed files:"
          cat artifacts/changed_files.txt

      # Generate package.xml and destructiveChanges.xml based on changes
      - name: Generate package.xml and destructiveChanges.xml
        run: |
          mkdir -p artifacts

          # Generate package.xml for added/modified files
          echo '<?xml version="1.0" encoding="UTF-8"?>' > artifacts/package.xml
          echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> artifacts/package.xml
          awk '$1 != "D" {print "  <!-- " $0 " -->"}' artifacts/changed_files.txt >> artifacts/package.xml
          echo '  <version>59.0</version>' >> artifacts/package.xml
          echo '</Package>' >> artifacts/package.xml

          # Generate destructiveChanges.xml for deleted files
          echo '<?xml version="1.0" encoding="UTF-8"?>' > artifacts/destructiveChanges.xml
          echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> artifacts/destructiveChanges.xml
          awk '$1 == "D" {print "  <!-- " $0 " -->"}' artifacts/changed_files.txt >> artifacts/destructiveChanges.xml
          echo '</Package>' >> artifacts/destructiveChanges.xml
          echo "Generated package.xml:"
          cat artifacts/package.xml
          echo "Generated destructiveChanges.xml:"
          cat artifacts/destructiveChanges.xml

      # Upload generated metadata files as artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: delta-artifacts
          path: artifacts/*

      # Copy added/modified files from source branch to working directory
      - name: Copy changes (skip deletions)
        run: |
          while read status file; do
            if [ "$status" = "A" ] || [ "$status" = "M" ]; then
              mkdir -p "$(dirname "$file")"
              git show "source-origin/MALTSSQA:$file" > "$file"
            fi
          done < artifacts/changed_files.txt

      # Commit the merged changes
      - name: Commit merged changes
        run: |
          git add force-app/main/default
          if git diff --cached --quiet; then
            echo "No non-deletion changes to commit."
          else
            git commit -m "Merge changes from MALTSSQA to RELEASE Branch"
          fi

      # Push changes to RELEASE092025 branch
      - name: Push changes to RELEASE092025
        run: git push origin HEAD:RELEASE092025

      # Update the SHA variable to track the latest successful merge
      - name: Update SHA ID 
        run: |
          NEW_SHA=$(git rev-parse source-origin/MALTSSQA)
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/environments/RELEASE/variables/LAST_GOOD_SHA_RELEASE_MERGE \
            -f name="LAST_GOOD_SHA_RELEASE_MERGE" \
            -f value="$NEW_SHA"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      # Final success message
      - name: Success message
        run: echo "Successfully merged changes from MALTSSQA â†’ RELEASE Branch"
