# -------------------------------------------------------------
# Salesforce Quick Deploy to Production
# -------------------------------------------------------------
name: Quick Deploy to Production

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

env:
  environment: PROD
  SF_PROD_AUTH_URL: ${{ secrets.SF_PROD_AUTH_URL }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  SNOW_INSTANCE: optum.service-now.com
  SNOW_USER: ${{ vars.SNOW_USER_NAME }}
  SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
  ASSIGNMENT_GROUP_NAME: 'e1593c734f65fe80648a8e1f0210c763'
  VARIABLE_NAME: LAST_VALIDATION_ASYNC_ID

jobs:
  quick-deploy-to-prod:
    runs-on: uhg-runner
    if: contains('["njain95_uhg", "uchandr5_uhg", "btiwary1_uhg", "sgopal22_uhg", "sdevi15_uhg", "svarma3__uhg"]', github.actor)
    environment: PROD
    outputs:
      Deploy_status: ${{ steps.deploy.outputs.Deploy_status }}
    
    steps:
      # -----------------------------------------------------------
      # Step 1: Validate Async ID exists
      # -----------------------------------------------------------
      - name: Verify Async ID Availability
        run: |
          echo "Checking if Async ID is available..."
          if [ -z "${{ env.LAST_VALIDATION_ASYNC_ID }}" ] || [ "${{ env.LAST_VALIDATION_ASYNC_ID }}" == "null" ]; then
            echo "No Async ID found in environment. Please run 'Validate to Production' first."
            exit 1
          fi
          echo "Found Async ID: ${{ env.LAST_VALIDATION_ASYNC_ID }}"

      # -----------------------------------------------------------
      # Step 2: Validate Change Request in SNOW
      # -----------------------------------------------------------
      - name: Validate Change Request in SNOW
        id: Validate-CR
        run: |
          RESPONSE=$(curl -s -X GET "https://${SNOW_INSTANCE}/api/now/table/change_request?sysparm_query=assignment_group=${ASSIGNMENT_GROUP_NAME}^stateIN-1,2^end_date>javascript:gs.now()^NQ(start_dateBETWEENjavascript:gs.now()@javascript:gs.hoursAgoStart(24))&sysparm_fields=number,state,short_description,start_date,end_date" \
            -u "$SNOW_USER:$SNOW_PASSWORD" -H "Accept: application/json")

          echo "ServiceNow API Response:"
          echo "$RESPONSE" | jq .

          COUNT=$(echo "$RESPONSE" | jq -r '.result | length')

          if [ "$COUNT" -eq 0 ]; then
            echo "No approved CR found for the next 24 hours."
            exit 1
          fi

          CR_NUMBER=$(echo "$RESPONSE" | jq -r '.result[0].number')
          CR_STATE=$(echo "$RESPONSE" | jq -r '.result[0].state')
          CR_START=$(echo "$RESPONSE" | jq -r '.result[0].start_date')
          CR_END=$(echo "$RESPONSE" | jq -r '.result[0].end_date')

          echo "CR validation passed for $CR_NUMBER ($CR_STATE)"
          echo "Change Window: $CR_START â†’ $CR_END"

          echo "CR_NUMBER=$CR_NUMBER" >> $GITHUB_ENV
          echo "CR_STATE=$CR_STATE" >> $GITHUB_ENV

      # -----------------------------------------------------------
      # Step 3: Install NodeJS and Salesforce CLI
      # -----------------------------------------------------------
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Configure JFrog npm registry
        run: echo "//centraluhg.jfrog.io/artifactory/api/npm/maltss-npm-vir/:_authToken=${JFROG_NPM_TOKEN}" > ~/.npmrc
        env:
          JFROG_NPM_TOKEN: ${{ secrets.JFROG_NPM_TOKEN }}
          
      - name: Set Salesforce CLI registry
        run: echo "SF_NPM_REGISTRY=https://centraluhg.jfrog.io/artifactory/api/npm/maltss-npm-vir/" >> $GITHUB_ENV
          
      - name: Set npm registry and SF_NPM_REGISTRY environment variable  
        run: |  
          sudo npm config set registry https://repo1.uhc.com/artifactory/api/npm/npm-virtual/ --global  
          echo "SF_NPM_REGISTRY=https://repo1.uhc.com/artifactory/api/npm/npm-virtual/" >> $GITHUB_ENV
 
      - name: Install Salesforce CLI
        run: | 
          npm install -g @salesforce/cli --registry=https://centraluhg.jfrog.io/artifactory/api/npm/maltss-npm-vir/
          sf --version
          echo "-- Set Salesforce CLI environment variables --"
          echo "SF_DISABLE_AUTOUPDATE=true" >> $GITHUB_ENV
          echo "SF_DISABLE_SOURCE_MEMBER_POLLING=true" >> $GITHUB_ENV

      # -----------------------------------------------------------
      # Step 4: Authenticate to Salesforce org using sfdxAuthUrl
      # -----------------------------------------------------------
      - name: Populate auth file with SF_AUTH secret
        run: |
          echo "${{ secrets.SF_PROD_AUTH_URL }}" > ./AUTHURL.txt
          if [ $(wc -c < "./AUTHURL.txt") -le 1 ]; then
            echo "Missing AUTHURL secret"
            exit 1
          fi
          
      - name: Authenticate to the Org
        run: sf org login sfdx-url --sfdx-url-file ./AUTHURL.txt --set-default --alias thisOrg

      # -----------------------------------------------------------
      # Step 5: Install sfdx-git-delta Plugin
      # -----------------------------------------------------------
      - name: Install sfdx git delta
        run: echo y | sfdx plugins:install sfdx-git-delta@6.19.0

      # -----------------------------------------------------------
      # Step 6: Execute Quick Deployment
      # -----------------------------------------------------------
      - name: Run Quick Deploy
        id: quickdeploy
        run: |
          echo "Starting Quick Deploy using Async ID: ${{ env.LAST_VALIDATION_ASYNC_ID }}"
          sf project deploy quick \
            --target-org thisOrg \
            --async-job-id "${{ env.LAST_VALIDATION_ASYNC_ID }}" \
            --wait 500 \
            --json > quickdeploy-result.json 2> quickdeploy-error.log || true

          cat quickdeploy-error.log || true

          STATUS=$(jq -r '.result.status' quickdeploy-result.json)
          echo "Deployment Status: $STATUS"

          if [ "$STATUS" == "Succeeded" ]; then
            echo "DEPLOY_STATUS=Succeeded" >> $GITHUB_ENV
          else
            echo "DEPLOY_STATUS=Failed" >> $GITHUB_ENV
          fi

      - name: Upload Deployment Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quickdeploy-result
          path: quickdeploy-result.json

      # -----------------------------------------------------------
      # Step 7: Email Notification
      # -----------------------------------------------------------
      - name: Send Success Email
        if: ${{ env.DEPLOY_STATUS == 'Succeeded' }}
        uses: uhg-pipelines/epl-send-mail@v1
        with:
          subject: "Quick Deploy to Production Successful"
          to: sahil_varma@optum.com, brajesh_tiwary@optum.com, chandrasekhar_uppalapati@optum.com, shikha_devi@optum.com, gopal_shakti@optum.com, neha_jain@optum.com
          from: "donotreply@optum.com"
          body: |
            Hello Team,
            The Deployment to Production has been successfully completed. Developers can initiate the sanity tests & perform post deployment steps.

                Change Request: ${{ env.CR_NUMBER }}
                Status: ${{ env.CR_STATE }}
                AsyncResultId: ${{ env.LAST_VALIDATION_ASYNC_ID }}
                Status: Succeeded

            Regards,
            MALTSS Team

      - name: Send Failure Email
        if: ${{ env.DEPLOY_STATUS != 'Succeeded' }}
        uses: uhg-pipelines/epl-send-mail@v1
        with:
          subject: "Quick Deploy to Production Failed"
          to: sahil_varma@optum.com, brajesh_tiwary@optum.com, chandrasekhar_uppalapati@optum.com, shikha_devi@optum.com, gopal_shakti@optum.com, neha_jain@optum.com
          from: "donotreply@optum.com"
          body: |
            Hello Team,
            The Deployment to Production has failed.

                AsyncResultId: ${{ env.LAST_VALIDATION_ASYNC_ID }}
                Status: Failed

            Please review Salesforce deployment logs or re-run validation before attempting a new deploy.
            
            Regards,
            MALTSS Team

      # -----------------------------------------------------------
      # Step 8: Save Last SHA ID:
      # -----------------------------------------------------------
    save_last_good_sha:
        runs-on: uhg-runner
        environment: PROD
        needs: deploy-to-prod
        if: needs.deploy-to-prod.outputs.deploy_status == 'Succeeded'

        steps:
          - name: Checkout code
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - name: Update LAST_GOOD_SHA_PROD environment variable
            env:
              GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
              OWNER: ${{ github.repository_owner }}
              REPO: ${{ github.event.repository.name }}
              ENV_NAME: PROD
              VARIABLE_NAME: LAST_GOOD_SHA_PROD
              SHA: ${{ github.sha }}
            run: |
              echo "Updating $VARIABLE_NAME in environment $ENV_NAME with SHA=$SHA"
          
              # Try to update (PATCH)
              RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
                -X PATCH \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables/$VARIABLE_NAME \
                -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
          
              if [ "$RESPONSE" -eq 404 ]; then
                echo "Variable not found, creating instead..."
                RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
                  -X POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer $GITHUB_TOKEN" \
                  https://api.github.com/repos/$OWNER/$REPO/environments/$ENV_NAME/variables \
                  -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$SHA\"}")
              fi
          
              echo "HTTP Response: $RESPONSE"
              cat response.json
              
          - name: Cleanup AsyncResultId
            if: success()
            env:
              OWNER: ${{ github.repository_owner }}
              REPO: ${{ github.event.repository.name }}
              GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
            run: |
              curl -s -X PATCH \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                https://api.github.com/repos/$OWNER/$REPO/environments/$environment/variables/$VARIABLE_NAME \
                -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"\"}"
