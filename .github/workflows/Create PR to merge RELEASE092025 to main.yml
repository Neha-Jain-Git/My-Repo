name: Create PR to merge RELEASE092025 to main

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

jobs:
  Merge:
    runs-on: uhg-runner
    if: contains('["njain95_uhg", "uchandr5_uhg", "btiwary1_uhg", "sgopal22_uhg", "sdevi15_uhg"]', github.actor)
    environment: main
    steps:
      - name: Checkout target branch (main)
        uses: actions/checkout@v4
        with:
          ref: main
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.email "maltss_tech@optum.com"
          git config user.name "maltssdeploy"
      - name: Add remote and fetch source branch (RELEASE092025)
        run: |
          git remote add source-origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git || true
          git fetch source-origin RELEASE092025
      - name: Get last merged SHA
        id: lastsha
        run: echo "sha=${{ vars.LAST_GOOD_SHA_MAIN_MERGE }}" >> $GITHUB_OUTPUT

      - name: Find changed files since last promotion
        id: changes
        run: |
          mkdir -p artifacts
          if [ -n "${{ steps.lastsha.outputs.sha }}" ]; then
            git diff --name-status ${{ steps.lastsha.outputs.sha }} source-origin/RELEASE092025 -- force-app/main/default/ > artifacts/changed_files.txt
          else
            git diff --name-status origin/main source-origin/RELEASE092025 -- force-app/main/default/ > artifacts/changed_files.txt
          fi
          echo "Changed files:"
          cat artifacts/changed_files.txt
      # Generate package.xml and destructiveChanges.xml based on changes
      - name: Generate package.xml and destructiveChanges.xml
        run: |
          mkdir -p artifacts
          # Generate package.xml for added/modified files
          echo '<?xml version="1.0" encoding="UTF-8"?>' > artifacts/package.xml
          echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> artifacts/package.xml
          awk '$1 != "D" {print "  <!-- " $0 " -->"}' artifacts/changed_files.txt >> artifacts/package.xml
          echo '  <version>59.0</version>' >> artifacts/package.xml
          echo '</Package>' >> artifacts/package.xml
          # Generate destructiveChanges.xml for deleted files
          echo '<?xml version="1.0" encoding="UTF-8"?>' > artifacts/destructiveChanges.xml
          echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> artifacts/destructiveChanges.xml
          awk '$1 == "D" {print "  <!-- " $0 " -->"}' artifacts/changed_files.txt >> artifacts/destructiveChanges.xml
          echo '</Package>' >> artifacts/destructiveChanges.xml
          echo "Generated package.xml:"
          cat artifacts/package.xml
          echo "Generated destructiveChanges.xml:"
          cat artifacts/destructiveChanges.xml
      
      # Upload generated metadata files as artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: delta-artifacts
          path: artifacts/*

      - name: Copy changes (skip deletions)
        run: |
          while read status file; do
            case "$status" in
              A|M)
                mkdir -p "$(dirname "$file")"
                git show "source-origin/RELEASE092025:$file" > "$file"
                ;;
              D)
                git rm -f "$file" 2>/dev/null || true
                ;;
            esac
          done < artifacts/changed_files.txt
      - name: Create feature branch for PR
        run: |
          BRANCH_NAME="merge-RELEASE092025-to-main-$(date +%Y%m%d%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME

          # Stage only Salesforce metadata changes
          git add force-app/main/default/

          if git diff --cached --quiet; then
            echo "No changes to commit. Skipping PR."
            echo "skip_pr=true" >> $GITHUB_ENV
          else
            git commit -m "Merge changes from RELEASE092025 to main Branch"
            git push origin $BRANCH_NAME
          fi

      - name: Create Pull Request
        if: env.skip_pr != 'true'
        id: create_pr
        run: |
          PR_URL=$(gh pr create \
            --base main \
            --head ${{ env.branch_name }} \
            --title "Merge changes from RELEASE092025 to main Branch" \
            --body "Automated PR to merge changes from RELEASE092025 to main Branch (only /force-app/main/default/)" \
            --reviewer "optum-sgs/maltss_git_admin,uchandr5_uhg,btiwary1_uhg,sgopal22_uhg,sdevi15_uhg,mubaid_uhg")
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: PR created
        if: env.skip_pr != 'true'
        run: |
          echo "Pull Request created: ${{ steps.create_pr.outputs.pr_url }}"
