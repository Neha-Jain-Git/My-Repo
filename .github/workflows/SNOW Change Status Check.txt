name: SNOW Change Status Check

on:
  push:
    branches:
      - GHTEST

permissions:
  contents: read

env:
  environment: PROD
  SF_PROD_AUTH_URL: ${{ secrets.SF_PROD_AUTH_URL }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  SNOW_INSTANCE: optumstage.service-now.com
  SNOW_USER: ${{ vars.SNOW_USER_NAME }}
  SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
  SNOW_GROUP: 'e1593c734f65fe80648a8e1f0210c763'
  VARIABLE_NAME: LAST_VALIDATION_ASYNC_ID

jobs:
  snow-check:
    runs-on: uhg-runner
    environment: PROD

    steps:
      - name: Step 1 - Display current GitHub time
        run: |
          echo "GitHub Runner UTC Time:"
          GITHUB_TIME=$(date -u +"%Y-%m-%d %H:%M:%S")
          echo "GitHub UTC: $GITHUB_TIME"
          echo "GITHUB_TIME=$GITHUB_TIME" >> $GITHUB_ENV

      - name: Step 2 - Display current time from SNOW
        id: snow_time
        run: |
          echo "Fetching current time from ServiceNow (via change_request)..."
          SNOW_TIME=$(curl -s --user "${SNOW_USER}:${SNOW_PASSWORD}" \
            "https://${SNOW_INSTANCE}/api/now/table/change_request?sysparm_query=ORDERBYDESCsys_updated_on&sysparm_limit=1&sysparm_fields=sys_updated_on" \
            -H "Accept: application/json" | jq -r '.result[0].sys_updated_on')
          
          echo "ServiceNow Instance Time: $SNOW_TIME"
          echo "SNOW_TIME=$SNOW_TIME" >> $GITHUB_ENV

      - name: Step 3 - Fetch change requests within 24 hours
        id: snow_change
        run: |
          echo "Fetching change requests assigned to group: ${SNOW_GROUP} in next 24 hours"

          # Compute ServiceNow current time and 24 hours from now in UTC format
          SNOW_NOW=$(date -u +"%Y-%m-%d %H:%M:%S")
          SNOW_NEXT24=$(date -u -d "+24 hours" +"%Y-%m-%d %H:%M:%S")

          echo "Current SNOW Time (UTC): $SNOW_NOW"
          echo "Next 24 Hours Mark (UTC): $SNOW_NEXT24"

          #QUERY="assignment_group=${SNOW_GROUP}^stateIN1,2^start_dateONORAFTERjavascript:gs.minutesAgo(-1440)^end_dateONORAFTERjavascript:gs.now()^ORDERBYstart_date"
          #QUERY="assignment_group=${SNOW_GROUP}^start_dateONORAFTERjavascript:gs.minutesAgo(1440)^end_dateONORAFTERjavascript:gs.now()^ORDERBYstart_date"
          #QUERY="assignment_group=${SNOW_GROUP}^state=-1^start_dateONORBEFOREjavascript:gs.now()^start_dateISNOTEMPTY^end_dateONORAFTERjavascript:gs.now()^end_dateISNOTEMPTY^ORDERBYstart_date" #Deploy Query
          QUERY="assignment_group=${SNOW_GROUP}^stateIN-1^((start_dateISNOTEMPTY^end_dateISNOTEMPTY^start_dateGTjavascript:gs.hoursAgo(-24))OR(start_dateISNOTEMPTY^end_dateISNOTEMPTY^start_dateONORBEFOREjavascript:gs.now()^end_dateONORAFTERjavascript:gs.now()))^ORDERBYstart_date"
          echo "ServiceNow Query: $QUERY"

          response=$(curl -s -u "${SNOW_USER}:${SNOW_PASSWORD}" \
            "https://${SNOW_INSTANCE}/api/now/table/change_request?sysparm_query=${QUERY}&sysparm_limit=1&sysparm_fields=number,state,short_description,start_date,end_date" \
            -H "Accept: application/json")

          echo "Response from ServiceNow:"
          #echo "$response" | jq .

          count=$(echo "$response" | jq '.result | length')
          if [ "$count" -eq 0 ]; then
            echo "No valid Change Requests found in the next 24 hours for group ${SNOW_GROUP}."
          fi

          echo "Found $count eligible Change Request(s)."
          echo "$response" | jq -r '.result[] | "\(.number) | \(.state) | \(.start_date) | \(.end_date) | \(.short_description)"'
