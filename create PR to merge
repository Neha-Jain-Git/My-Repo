name: Merge RELEASE to main via PR

on:
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

jobs:
  Merge:
    runs-on: uhg-runner
    environment: main

    steps:
      # Checkout the target branch (main)
      - name: Checkout target branch (main)
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      # Configure Git
      - name: Configure Git
        run: |
          git config user.email "maltss_tech@optum.com"
          git config user.name "maltssdeploy"

      # Add remote and fetch RELEASE branch
      - name: Add remote and fetch RELEASE092025
        run: |
          git remote add source-origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git || true
          git fetch source-origin RELEASE092025

      # Get last merged SHA
      - name: Get last merged SHA
        id: lastsha
        run: echo "sha=${{ vars.LAST_GOOD_SHA_main_MERGE }}" >> $GITHUB_OUTPUT

      # Find changed files
      - name: Find changed files since last promotion
        id: changes
        run: |
          mkdir -p artifacts
          if [ -n "${{ steps.lastsha.outputs.sha }}" ]; then
            git diff --name-status ${{ steps.lastsha.outputs.sha }} source-origin/RELEASE092025 -- force-app/main/default/ > artifacts/changed_files.txt
          else
            git diff --name-status origin/main source-origin/RELEASE092025 -- force-app/main/default/ > artifacts/changed_files.txt
          fi
          echo "Changed files:"
          cat artifacts/changed_files.txt

      # Generate package.xml + destructiveChanges.xml
      - name: Generate package.xml and destructiveChanges.xml
        run: |
          mkdir -p artifacts
          echo '<?xml version="1.0" encoding="UTF-8"?>' > artifacts/package.xml
          echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> artifacts/package.xml
          awk '$1 != "D" {print "  <!-- " $0 " -->"}' artifacts/changed_files.txt >> artifacts/package.xml
          echo '  <version>59.0</version>' >> artifacts/package.xml
          echo '</Package>' >> artifacts/package.xml

          echo '<?xml version="1.0" encoding="UTF-8"?>' > artifacts/destructiveChanges.xml
          echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> artifacts/destructiveChanges.xml
          awk '$1 == "D" {print "  <!-- " $0 " -->"}' artifacts/changed_files.txt >> artifacts/destructiveChanges.xml
          echo '</Package>' >> artifacts/destructiveChanges.xml

      - uses: actions/upload-artifact@v4
        with:
          name: delta-artifacts
          path: artifacts/*

      # Copy changes (skip deletions)
      - name: Copy changes (skip deletions)
        run: |
          while read status file; do
            if [ "$status" = "A" ] || [ "$status" = "M" ]; then
              mkdir -p "$(dirname "$file")"
              git show "source-origin/RELEASE092025:$file" > "$file"
            fi
          done < artifacts/changed_files.txt

      # Create new branch for PR
      - name: Create feature branch for PR
        run: |
          BRANCH_NAME="merge-release092025-to-main-$(date +%Y%m%d%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME
          git add force-app/main/default
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Merge changes from RELEASE092025 into main"
          fi
          git push origin $BRANCH_NAME

      # Create PR into main
      - name: Create Pull Request
        id: create_pr
        run: |
          PR_URL=$(gh pr create \
            --base main \
            --head ${{ env.branch_name }} \
            --title "Merge RELEASE092025 into main" \
            --body "Automated PR to merge RELEASE092025 changes into main branch" \
            --assignee "GIT_Admin" \
            --reviewer "GIT_Admin" \
            --label "release-merge")
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      # Output PR link
      - name: PR created
        run: echo "Pull Request created: ${{ steps.create_pr.outputs.pr_url }}"