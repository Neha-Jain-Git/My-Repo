Assignment Brief: Stock Market Dashboard (End-User Perspective)

0) Scenario

You are a financial advisor working at a wealth management company. Every day, you need to keep an eye on stock prices and track the performance of your clients‚Äô favorite companies. Currently, you switch between many websites to get updates. Management wants you to have everything inside Salesforce so you can:

Create personal watchlists of stocks.

See live prices and daily changes.

Look at simple charts showing past performance.

Get alerts when a stock moves above or below a certain price.


The goal of this project is to build a basic stock market dashboard in Salesforce using data from an external stock API.


---

1) What You Should Be Able to Do (End User Needs)

1. Search for Stocks: Type part of a company‚Äôs name or stock symbol (e.g., ‚ÄúAAPL‚Äù or ‚ÄúApple‚Äù) and add it to a watchlist.


2. Create Watchlists: Organize stocks into groups (e.g., ‚ÄúTech Stocks‚Äù, ‚ÄúTop Clients‚Äô Picks‚Äù).


3. View Stock Prices: For each stock see:

Current price

Daily change (%)

Open, high, low, close (basic daily info)



4. Historical Trend: Click a stock and see a simple line chart showing how its price moved in the last few months.


5. Set Alerts: Get a notification (email or message inside Salesforce) when a stock:

Goes above a certain price

Falls below a certain price



6. Dashboard Page: One screen in Salesforce (‚ÄúMarket Center‚Äù) that shows:

Your watchlists with prices

A price chart for the stock you click

Any alerts that were triggered recently





---

2) Basic Data Needed in Salesforce

Stock: Symbol, company name, last price, % change, last updated.

Watchlist: Name of the list (e.g., ‚ÄúTech‚Äù), created by the advisor.

Watchlist Item: Connection between a watchlist and a stock.

Price Alert: Stock, rule (above/below price), and whether it has been triggered.



---

3) How the System Works (Simplified)

1. User searches for a stock ‚Üí system calls stock API ‚Üí result is saved in Salesforce.


2. User adds it to a watchlist.


3. Every few minutes, Salesforce calls the stock API to refresh prices.


4. If the new price crosses an alert rule, Salesforce sends a notification.


5. User goes to the Market Center dashboard to:

See watchlist prices

Open a stock chart

Review alerts





---

4) What Students Need to Build

1. Custom Objects in Salesforce for Stock, Watchlist, Watchlist Item, and Price Alert.


2. API Integration: A simple Apex class to call the external stock API and fetch prices.


3. Scheduled Job: A job that refreshes stock prices every 5‚Äì10 minutes.


4. Lightning Page (Dashboard):

A table of stocks in watchlists with latest prices.

A simple chart showing historical prices for one stock.

An alerts panel.



5. Alert Logic: Simple rule that compares price to the alert threshold and sends a notification.




---

5) Deliverables

Salesforce setup with custom objects.

Apex class for API callout.

Simple LWC for watchlist display and search.

Lightning Page called ‚ÄúMarket Center‚Äù.

Test classes for API logic.



---

6) Success Criteria

I can search and add stocks to my watchlist.

I can see live price updates in Salesforce.

I can click on a stock and see a simple chart of past prices.

I can create alerts and receive a notification when triggered.

Everything is available in one Salesforce page (Market Center).



---

üëâ Note: Keep it simple. The focus is on understanding how Salesforce connects with an API and how to present that data to end users, not on building a full trading platform.