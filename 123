# This GitHub Actions workflow deploys changes to the sandbox environment.
# It is triggered manually via repository_dispatch.
# The repository_dispatch event triggers only if the code resides in the default branchd.
# Pull requests merged by bots may not trigger workflows as intended. Using repository_dispatch ensures workflows are manually triggered and executed reliably.
# 
# Using a Personal Access Token (PAT) instead of the default GITHUB_TOKEN due to insufficient permissions for updating repository or environment variables.

name: Deploy to DDIQA_Sandbox
on:
  push:      
    branches: 
      - "DDIQAGH" 
  workflow_dispatch:
  
permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

env:
  #SF_NPM_REGISTRY: https://repo1.uhc.com/artifactory/api/npm/npm-virtual/
  environment: DDIQA
  SF_DDIQA_AUTH_URL: ${{ secrets.SF_DDIQA_AUTH_URL}}
  #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  deploy-on-merge:
    #if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'DDIQAGH'
    runs-on: uhg-runner-m
    environment: DDIQA

    outputs:
      deploy_status: ${{ steps.deploy.outputs.deploy_status }}

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure the full repository is fetched

      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sf-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          export PATH=$HOME/sfdx/bin:$PATH
          sf version

      # Populate auth file with SF_AUTH secret
      - name: Populate auth file with SF_AUTH secret
        shell: bash
        run: |
          echo "${{ secrets.SF_DDIQA_AUTH_URL }}" > ./AUTHURL.txt
          secretFileSize=$(wc -c "./AUTHURL.txt" | awk '{print $1}')
          if [ $secretFileSize -le 1 ]; then
            echo "Missing AUTHURL secret. Is this workflow running on a fork?";
            exit 1;
          fi

      # Authenticate to the org using the URL stored in the text file
      - name: Authenticate to the Org
        run: sf org login sfdx-url --sfdx-url-file ./AUTHURL.txt --set-default --alias thisOrg

      # We need to consider installing specific version for both CLI and Delta
      # Install sfdx git delta
      - name: Install sfdx git delta
        run: |
          echo y | sf plugins install sfdx-git-delta
          sf plugins

      # Create delta package for new and modified metadata
      - name: Create delta package for new and modified metadata
        run: |
          mkdir -p build/temp/changed-sources
          echo "LAST_GOOD_SHA_DDIQA: ${{ vars.LAST_GOOD_SHA_DDIQA }}"
          sf sgd source delta --from "${{ vars.LAST_GOOD_SHA_DDIQA }}" --to "origin/DDIQAGH" --output-dir build/temp/changed-sources/ --generate-delta --source-dir force-app/ --ignore-file .gitignore

      # Delete empty directories to clean up the delta package
      - name: Delete empty directories
        run: find build/temp/changed-sources/ -type d -empty -delete

      # Create zip artifacts for the delta package
      - name: Create zip artifacts
        run: |
          zip -r build/temp/changed-sources.zip build/temp/changed-sources/

      # Upload zip artifact
      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: changed-sources
          path: build/temp/changed-sources.zip

      # Deploy the changes to Sandbox
      - name: Deploy to Sandbox
        run: |
          #sf project deploy start --source-dir "build/temp/changed-sources/" --target-org thisOrg --wait 360
          echo "Starting Salesforce Deployment"
          if ! sf project deploy start \
            --source-dir build/temp/changed-sources/ \
            --target-org thisOrg \
            --wait 360 \
            --json \
            --verbose > deploy-result.json 2> deploy-error.log; then
            echo "Deployment command failed. Below is the error:"
            cat deploy-error.log
            echo "deploy_status=Failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
  Send_Email_Notification:
    runs-on: uhg-runner-m
    environment: DDIQA
    #needs: deploy-on-merge
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Error Message
        id: errors
        run: |
          if [[ "${{ needs.deploy-on-merge.outputs.deploy_status }}" == "Failed" ]]; then
            jq -r '.result.details.componentFailures[]?.problem' deploy-result.json > error-msg.txt || echo "No errors found"
            echo "errors=$(cat error-msg.txt | sed ':a;N;$!ba;s/\n/\\n/g')" >> $GITHUB_OUTPUT
          fi

      - name: Get Authors of Changed Files
        id: authors
        run: |
          git fetch origin DDIQAGH
          git log ${{ vars.LAST_GOOD_SHA_DDIQA }}..HEAD --pretty=format:"%an <%ae>" | sort | uniq > authors.txt
          echo "emails=$(paste -sd ',' authors.txt)" >> $GITHUB_OUTPUT

      - name: Send Email on Failure
        if: needs.deploy-on-merge.outputs.deploy_status == 'Failed'
        uses: uhg-pipelines/epl-send-mail@v1
        with:
          subject: "Build Failure"
          to: "${{ steps.authors.outputs.emails }}"
          from: "notifications@github.com"
          body: |
            The deployment to QA failed with the following error(s):
            ${{ steps.errors.outputs.errors }}

      - name: Notify if Build is Now Fixed
        if: needs.deploy-on-merge.outputs.deploy_status == 'Succeeded'
        uses: uhg-pipelines/epl-send-mail@v1
        with:
          subject: "Build is back to normal"
          to: "${{ steps.authors.outputs.emails }}"
          from: "notifications@github.com"
          body: |
            The latest build to QA succeeded. The issue is now resolved.


  save_last_good_sha:
    runs-on: uhg-runner-m
    environment: DDIQA
    needs: deploy-on-merge

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure the full repository is fetched

      # Save the last good SHA
      - name: Save last good SHA
        run: |
          echo "LAST_GOOD_SHA_DDIQA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # Update the environment variable in GitHub using PAT
      - name: Update LAST_GOOD_SHA_DDIQA in Environment
        run: |
          set -e  # Exit immediately if any command fails
          OWNER=${{ github.repository_owner }}
          REPO=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          ENVIRONMENT="${{ env.environment }}"
          VARIABLE_NAME="LAST_GOOD_SHA_DDIQA"
          NEW_VALUE=$(git rev-parse HEAD)
            # Attempting to update the environment variable using the Personal Access Token (PAT)
            # Note: The PAT_TOKEN must belong to a real user with sufficient permissions to update environment variables.
            echo "Attempting to update $VARIABLE_NAME to $NEW_VALUE for environment $ENVIRONMENT"
            RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X PATCH \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$OWNER/$REPO/environments/$ENVIRONMENT/variables/$VARIABLE_NAME \
            -d "{\"name\":\"$VARIABLE_NAME\",\"value\":\"$NEW_VALUE\"}")
          if [[ "$RESPONSE" -ge 200 && "$RESPONSE" -lt 300 ]]; then
            echo "✅ Successfully updated $VARIABLE_NAME."
          else
            echo "❌ Failed to update $VARIABLE_NAME. HTTP status: $RESPONSE"
            echo "Response body:"
            cat response.json
            echo "Exiting workflow with failure."
          fi
